apply plugin: "artemis"
apply plugin: "kotlin"

project.ext.mainClassName = 'gabek.onebreath.LauncherKt'
eclipse.project.name = 'onebreath'

version = "0.0.1"

sourceSets.main.kotlin.srcDirs = ["src/"]

dependencies {
    compile project(':engine-core')
    compile project(':engine-quick')
}

task run(dependsOn: classes, type: JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName

    workingDir = file("workingDir")
}

task runTools(type: GradleBuild) {
    project
}

jar {
    archiveName "SewageThing-${version}.jar"
    from { configurations.compile.collect { zipTree(it) } }
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

weave {
    classesDir = sourceSets.main.output.classesDir
    enableArtemisPlugin = true
    enablePooledWeaving = true
    generateLinkMutators = true
    optimizeEntitySystems = true
}

classes.finalizedBy weave

import com.badlogic.gdx.tools.texturepacker.TexturePacker
import com.kotcrab.vis.usl.Main

task pack {
    doLast {
        // Note that if you need multiple atlases, you can duplicate the
        // TexturePacker.process invocation and change paths to generate
        // additional atlases with this task.
        TexturePacker.process(
                'raw/ui/x1',        // Raw assets path.
                'workingDir/assets/ui',        // Output directory.
                'skin'              // Name of the generated atlas (without extension).
        )

        TexturePacker.process(
                'raw/art/actors',
                'workingDir/assets/texture',
                'actors'
        )
    }
}
// Run `gradle compileSkin` task to generate skin.json at assets/ui.
task compileSkin {
    doLast{
        // Convert USL skin file into JSON
        String[] uslArgs = [
                projectDir.path + '/raw/ui/skin.usl',     // Input USL file
                projectDir.path + '/workingDir/assets/ui/skin.json'  // Output JSON file
        ]
        Main.main(uslArgs)
    }
}
// Run `gradle packAndCompileSkin` to generate skin atlas and compile USL into JSON
task packAndCompileSkin(dependsOn: [pack, compileSkin])
